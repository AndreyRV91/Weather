<ResourceDictionary
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:converters="clr-namespace:Weather.Resources.Converters">
        <converters:StringNullOrEmptyToVisibilityConverter x:Key="StringNullOrEmptyToVisibilityConverter"/>


    <Style x:Key="MainWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="{Binding}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{DynamicResource MainBackgroundColor}">
                        <ContentPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForeground}"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="WeatherHeader" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Foreground" Value="#D0B990"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="WeatherProperty" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Margin" Value="5 5 0 5"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource Self},Path=Text, Converter={StaticResource StringNullOrEmptyToVisibilityConverter} }"/>
    </Style>

    <Style x:Key="TownNameText" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="FontWeight" Value="Thin"/>
        <Setter Property="FontSize" Value="36"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource Self},Path=Text, Converter={StaticResource StringNullOrEmptyToVisibilityConverter} }"/>
    </Style>

    <Style x:Key="BusyIndicator" TargetType="Control">
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="RenderTransformOrigin" Value="0.5 0.5"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <Border>
                        <Border.Background>
                            <ImageBrush ImageSource="/Weather.Resources;component/Images/busyIndicator.png"
                                        RenderOptions.BitmapScalingMode="HighQuality" />
                        </Border.Background>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsBusy}" Value="True">
                            <Setter Property="Visibility" Value="Visible"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Name="RotationSB">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(Rectangle.RenderTransform).(RotateTransform.Angle)"
                                                         To="360" Duration="0:0:3" RepeatBehavior="Forever" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="RotationSB"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IcoButtonBase" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="50"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Image Grid.Column="0" Margin="10" Stretch="Uniform" HorizontalAlignment="Center"
                               VerticalAlignment="Center" RenderOptions.BitmapScalingMode="HighQuality"
                               Source="{Binding Tag, RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Button}}}"/>
                        <Border Grid.Column="0" Grid.ColumnSpan="2" Name="Mask" Background="{DynamicResource BaseButtonHoverColor}"/>
                        <ContentPresenter Grid.Column="1" HorizontalAlignment="Center">
                            <ContentPresenter.Resources>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                    <Setter Property="FontSize" Value="18"/>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Mask" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="Mask" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonBase" TargetType="{x:Type Button}">
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="{DynamicResource BaseButtonBackgroundColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border Grid.Column="0" Grid.ColumnSpan="2" Name="Mask" Background="{DynamicResource BaseButtonHoverColor}"/>
                        <ContentPresenter HorizontalAlignment="Center">
                            <ContentPresenter.Resources>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                    <Setter Property="FontSize" Value="18"/>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Mask" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="Mask" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
